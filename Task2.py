# -*- coding: utf-8 -*-
"""Homework-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLyQ5rg2ObKYwOVx14oHofEcjm7gJJf4
"""

import sys
!{sys.executable} -m pip install scikit-surprise

import pandas as pd
import numpy as np
from surprise import SVD
import numpy as np
import surprise
from surprise import Reader, Dataset
from surprise.model_selection import cross_validate
from surprise import KNNBasic
from matplotlib import pyplot as plt

rating_dataset = pd.read_csv('ratings_small.csv')
rating_dataset.style.background_gradient(cmap="PuBu")
rating_dataset

rating_dataset.info

rating_dataset.describe

rating_dataset.isnull()

rating_dataset['userId'].value_counts()

rating_dataset['movieId'].value_counts()

rating_dataset['rating'].value_counts()

rating_dataset['timestamp'].value_counts()

read = Reader(line_format='user item rating timestamp',sep=',',skip_lines=1, rating_scale=(1, 5))
ratings_data = Dataset.load_from_file("ratings_small.csv",read)

svd_algo = SVD(biased = False)

PMF_result = cross_validate(svd_algo, ratings_data, measures=['RMSE', 'MAE'],cv=5,verbose = True)
print("PMF Results -",PMF_result)

PMF_results_df = pd.DataFrame.from_dict(PMF_result)
PMF_results_df

print("Average PMF RMSE value", PMF_results_df['test_rmse'].mean())

print("Average PMF MAE value", PMF_results_df['test_mae'].mean())

sim_options = {'user_based': True }
user_based = KNNBasic(sim_options=sim_options)

user_based_results = cross_validate(user_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('user based results -', user_based_results)

user_based_results_df = pd.DataFrame.from_dict(user_based_results)
user_based_results_df

print("Average User Based RMSE value", user_based_results_df['test_rmse'].mean())

print("Average User Based MAE value", user_based_results_df['test_mae'].mean())

sim_options = {'user_based': False }
item_based = KNNBasic(sim_options=sim_options)

item_based_results = cross_validate(item_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('item based results -', item_based_results)

item_based_results_df = pd.DataFrame.from_dict(item_based_results)
item_based_results_df

print("Average Item Based RMSE value", item_based_results_df['test_rmse'].mean())

print("Average Item Based MAE value", item_based_results_df['test_mae'].mean())

sim_options = {'name':'cosine','user_based': True }
cosine_user_based = KNNBasic(sim_options=sim_options)

cosine_ub_results = cross_validate(cosine_user_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of Cosine on User Based -', cosine_ub_results)

sim_options = {'name':'msd','user_based': True }
msd_user_based = KNNBasic(sim_options=sim_options)

msd_ub_results = cross_validate(msd_user_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of MSD on User Based -', msd_ub_results)

sim_options = {'name':'pearson_baseline','user_based': True }
pb_user_based = KNNBasic(sim_options=sim_options)

pb_ub_results = cross_validate(pb_user_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of Pearson similarities on User Based -', pb_ub_results)

sim_options = {'name':'cosine','user_based': False }
cosine_item_based = KNNBasic(sim_options=sim_options)

cosine_ib_results = cross_validate(cosine_item_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of Cosine on Item Based -', cosine_ib_results)

sim_options = {'name':'msd','user_based': False }
msd_item_based = KNNBasic(sim_options=sim_options)

msd_ib_results = cross_validate(msd_item_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of MSD on Item Based -', msd_ib_results)

sim_options = {'name':'pearson_baseline','user_based': False }
pb_item_based = KNNBasic(sim_options=sim_options)

pb_ib_results = cross_validate(pb_item_based,ratings_data,measures=['rmse', 'mae'],cv=5,verbose=True)
print('Impact of Pearson similarities on Item Based -', pb_ib_results)

names = ['cosine', 'msd', 'pearson_baseline']
metrics = ['RMSE', 'MAE']
result_for_plot = {'user_based_cf': dict(),'item_based_cf': dict()}

for name in names:
    user_based = KNNBasic(sim_options={'name': name, 'user_based': True})
    item_based = KNNBasic(sim_options={'name': name, 'user_based': False})   
    user_based_combined = cross_validate(user_based, ratings_data, metrics, cv=5, verbose=True)
    item_based_combined = cross_validate(item_based, ratings_data, metrics, cv=5, verbose=True)
    result_for_plot['user_based_cf'][name] = user_based_combined
    result_for_plot['item_based_cf'][name] = item_based_combined

graph_data = {'mae': {'cosine': [], 'msd': [],'pearson_baseline': []},'rmse': {'cosine': [],'msd': [],'pearson_baseline': []}}
for i, j in result_for_plot.items():
    for value, result in result_for_plot[i].items():
        graph_data['mae'][value].append(result['test_mae'].mean())
        graph_data['rmse'][value].append(result['test_rmse'].mean())

graph_data

label = ['User Based']
value = np.arange(len(label))
width = 0.1
c="deeppink"
d="lime"
e="mediumblue"
plt.bar(value-0.1, graph_data['mae']['cosine'][0], width,color=c)
plt.bar(value, graph_data['mae']['msd'][0], width,color=d)
plt.bar(value+0.1, graph_data['mae']['pearson_baseline'][0], width,color=e)

plt.xticks(value, label)
plt.ylabel("MAE")
plt.yticks()
plt.legend(["Cosine", "MSD", "Pearson"])
plt.show()

label = ['Item Based']
value = np.arange(len(label))
width = 0.1
c="deeppink"
d="lime"
e="mediumblue"

plt.bar(value-0.1, graph_data['mae']['cosine'][1], width,color=c)
plt.bar(value, graph_data['mae']['msd'][1], width,color=d)
plt.bar(value+0.1, graph_data['mae']['pearson_baseline'][1], width,color=e)

plt.xticks(value, label)
plt.ylabel("MAE")
plt.yticks()
plt.legend(["Cosine", "MSD", "Pearson"])
plt.show()

label = ['User Based']
value = np.arange(len(label))
width = 0.1
c="deeppink"
d="lime"
e="mediumblue"
plt.bar(value-0.1, graph_data['rmse']['cosine'][0], width,color=c)
plt.bar(value, graph_data['rmse']['msd'][0], width,color=d)
plt.bar(value+0.1, graph_data['rmse']['pearson_baseline'][0], width,color=e)

plt.xticks(value, label)
plt.ylabel("RMSE")
plt.yticks()
plt.legend(["Cosine", "MSD", "Pearson"])
plt.show()

label = ['Item Based']
value = np.arange(len(label))
width = 0.1
c="deeppink"
d="lime"
e="mediumblue"

plt.bar(value-0.1, graph_data['rmse']['cosine'][1], width,color=c)
plt.bar(value, graph_data['rmse']['msd'][1], width,color=d)
plt.bar(value+0.1, graph_data['rmse']['pearson_baseline'][1], width,color=e)

plt.xticks(value, label)
plt.ylabel("RMSE")
plt.yticks()
plt.legend(["Cosine", "MSD", "Pearson"])
plt.show()

k_start = 1
mean = 2000
user_based_results = []
measures = ['RMSE', 'MAE']

for i in range(1,100):
    knn_user_based = KNNBasic(sim_options={'user_based': True}, k=i)
    cv_user_based = cross_validate(knn_user_based, ratings_data, measures, verbose=True, cv=5)

    start_mean = cv_user_based['test_rmse'].mean()
    if start_mean < mean:
        mean = start_mean
        k_start = i
    user_based_results.append(start_mean)
    print(i)

print(k_start, mean)

k_start = 1
mean = 200000
item_based_results = []
measures = ['RMSE', 'MAE']

for i in range(1,100):
    knn_item_based = KNNBasic(sim_options={'user_based': False}, k=i)
    cv_item_based = cross_validate(knn_item_based, ratings_data, measures, verbose=True, cv=5)

    start_mean = cv_item_based['test_rmse'].mean()
    if start_mean < mean:
        mean = start_mean
        k_start = i
    item_based_results.append(start_mean)
    print(i)
print(k_start, mean)

plt.plot(user_based_results, color = 'blue')
plt.xlabel("K")
plt.ylabel("RMSE")
plt.title("RMSE for values of K (User-Based CF)")
plt.show()

plt.plot(item_based_results, color = 'orange')
plt.xlabel("K")
plt.ylabel("RMSE")
plt.title("RMSE for values of K (Item-Based CF)")
plt.show()

plt.plot(user_based_results, color = 'blue')
plt.plot(item_based_results, color='orange')
plt.xlabel("K")
plt.ylabel("RMSE")
plt.title("RMSE for values of K (User-Based CF and Item-Based CF)")
plt.show()

#min value of k for user-based 
min_k_ub = min(user_based_results)
index_min_ub = user_based_results.index(min_k_ub)
print('Value of K with min RMSE for User-Based',index_min_ub)

#min value of k for user-based 
min_k_ib = min(item_based_results)
index_min_ib = item_based_results.index(min_k_ib)
print('Value of K with min RMSE for Item-Based',index_min_ib)

